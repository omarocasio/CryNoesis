///////////////////////////////////////////////  Vertex Shader ///////////////////////////////////////////////
struct VsIn
{
    float2 position: POSITION;
    
#if %_HAS_COLOR
    half4 color: COLOR;
#endif

#if %_HAS_UV0
    float2 uv0: TEXCOORD0;
#endif

#if %_HAS_UV1
    float2 uv1: TEXCOORD1;
#endif

#if %_HAS_COVERAGE
    half coverage: COVERAGE;
#endif

#if %_HAS_RECT
    float4 rect: RECT;
#endif

#if %_HAS_TILE
    float4 tile: TILE;
#endif

#if %_HAS_IMAGE_POSITION
    float4 imagePos: IMAGE_POSITION;
#endif

};

struct VsOut
{
    float4 position: SV_Position;

#if %_HAS_COLOR
    half4 color: COLOR;
#endif

#if %_HAS_UV0
    float2 uv0: TEXCOORD0;
#endif

#if %_HAS_UV1
    float2 uv1: TEXCOORD1;
#endif

#if %_DOWNSAMPLE
    float2 uv2: TEXCOORD2;
    float2 uv3: TEXCOORD3;
#endif

#if %_SDF
    float4 st1: TEXCOORD2;
#endif

#if %_HAS_COVERAGE
    half coverage: COVERAGE;
#endif

#if %_HAS_RECT
    float4 rect: RECT
#endif

#if %_HAS_TILE
    float4 tile: TILE;
#endif

#if %_HAS_IMAGE_POSITION
    float4 imagePos: IMAGE_POSITION;
#endif

};

cbuffer Buffer0VS: register(b0)
{
    float4x4 projectionMtx;
}

cbuffer Buffer1VS: register(b1)
{
    float2 textureSizeVS;
}

VsOut NoesisVS(in VsIn i)
{
	VsOut o;
    
    o.position = mul(projectionMtx, float4(i.position, 0, 1));

#if %_HAS_COLOR
    o.color = i.color.bgra;
#endif

#if %_DOWNSAMPLE
    o.uv0 = i.uv0 + float2(i.uv1.x, i.uv1.y);
    o.uv1 = i.uv0 + float2(i.uv1.x, -i.uv1.y);
    o.uv2 = i.uv0 + float2(-i.uv1.x, i.uv1.y);
    o.uv3 = i.uv0 + float2(-i.uv1.x, -i.uv1.y);
#else
    #if %_HAS_UV0
      o.uv0 = i.uv0;
    #endif
    #if %_HAS_UV1
      o.uv1 = i.uv1;
    #endif
#endif

#if %_SDF
    o.st1 = float4(i.uv1 * textureSizeVS.xy, 1.0 / (3.0 * textureSizeVS.xy));
#endif

#if %_HAS_COVERAGE
    o.coverage = i.coverage;
#endif

#if %_HAS_RECT
    o.rect = i.rect;
#endif

#if %_HAS_TILE
    o.tile = i.tile;
#endif

#if %_HAS_IMAGE_POSITION
    o.imagePos = i.imagePos;
#endif

	return o;
}
///////////////////////////////////////////////  Quad VS ///////////////////////////////////////////////
float4 NoesisQuad(in uint id: SV_VertexID): SV_Position
{
    float4 output = 0.0f;

    if(id == 0)
    {
        output = float4(-1.0f, 1.0f, 1.0f, 1.0f);
    }
    else if(id == 1)
    {
        output = float4(3.0f, 1.0f, 1.0f, 1.0f);
    }
    else
    {
        output = float4(-1.0f, -3.0f, 1.0f, 1.0f);
    }

    return output;
}

///////////////////////////////////////////////  Pixel Shader ///////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define SDF_SCALE 7.96875
#define SDF_BIAS 0.50196078431
#define SDF_AA_FACTOR 0.65
#define SDF_BASE_MIN 0.125
#define SDF_BASE_MAX 0.25
#define SDF_BASE_DEV -0.65

Texture2D patternTex: register(t0);
SamplerState patternSampler: register(s0)

Texture2D rampsTex: register(t1);
SamplerState rampsSampler: register(s1);

Texture2D imageTex: register(t2);
SamplerState imageSampler: register(s2);

Texture2D glyphsTex: register(t3);
SamplerState glyphsSampler: register(t3);

Texture2D shadowTex: register(t4);
SamplerState shadowSampler: register(t4);


cbuffer Buffer0: register(b0)
{
#if %_EFFECT_RGBA
    float4 rgba;
#endif

#if %_PAINT_RADIAL
    float4 radialGrad[2];
#endif

#if %_PAINT_LINEAR || %_PAINT_RADIAL || %_PAINT_PATTERN
    float opacity;
#endif
}

cbuffer Buffer1: register(b1)
{
    float4 textureSize;
}

cbuffer Buffer2: register(b2)
{
#if %_EFFECT_BLUR
    float blurSize;
#endif

#if %_EFFECT_SHADOW
    float4 shadowColor;
    float1 blurSize;
    float2 shadowOffset;
#endif
}

struct PixelOut
{
    half4 color: SV_Target0;

#if %_EFFECT_SDF_LCD
    half4 alpha: SV_Target1;
#endif
};



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

PixelOut NoesisPS(in VsOut i) 
{
    /////////////////////////////////////////////////////
    // Fetch paint color and opacity
    /////////////////////////////////////////////////////
    #if %_PAINT_SOLID
        half4 paint = i.color;
        half opacity_ = 1.0f;

    #elif %_PAINT_LINEAR
        half4 paint = rampsTex.Sample(rampsSampler, i.uv0);
        half opacity_ = opacity;

    #elif %_PAINT_RADIAL
        half dd = radialGrad[1].y * i.uv0.x - radialGrad[1].z * i.uv0.y;
        half u = radialGrad[0].x * i.uv0.x + radialGrad[0].y * i.uv0.y + radialGrad[0].z *
            sqrt(i.uv0.x * i.uv0.x + i.uv0.y * i.uv0.y - dd * dd);
        half4 paint = rampsTex.Sample(rampsSampler, half2(u, radialGrad[1].w));
        half opacity_ = radialGrad[0].w;

    #elif %_PAINT_PATTERN
        #if %_PAINT_PATTERN_CLAMP
        #elif %_PAINT_PATTERN_REPEAT || %_PAINT_PATTERN_MIRRORU || %_PAINT_PATTERN_MIRRORV || %_PAINT_PATTERN_MIRROR
            float2 uv = (i.uv0 - i.tile.xy) / i.tile.zw;
            #if %_PAINT_PATTERN_REPEAT
                uv = frac(uv);
            #elif %_PAINT_PATTERN_MIRRORU
                uv.x = abs(uv.x - 2.0 * floor((uv.x - 1.0) / 2.0) - 2.0);
                uv.y = frac(uv.y);
            #elif %_PAINT_PATTERN_MIRRORV
                uv.x = frac(uv.x);
                uv.y = abs(uv.y - 2.0 * floor((uv.y - 1.0) / 2.0) - 2.0);
            #else
                uv = abs(uv - 2.0 * floor((uv - 1.0) / 2.0) - 2.0);
            #endif
            uv = uv * i.tile.zw + i.tile.xy;
            float inside = all(uv == clamp(uv, i.rect.xy, i.rect.zw));
            half4 paint = inside * patternTex.Sample(patternSampler, uv, ddx(i.uv0), ddy(i.uv0));
        #else
            half4 paint = patternTex.Sample(patternSampler, i.uv0);
        #endif
        #if %_PATTERN_SRGB
            paint.xyz = LinearToSrgb(paint.xyz);
        #endif
        half opacity_ = opacity;
    #endif

    PixelOut o;

    /////////////////////////////////////////////////////
    // Apply selected effect
    /////////////////////////////////////////////////////
    
    #if %_EFFECT_RGBA
        o.color = rgba;

    #elif %_EFFECT_MASK
        o.color = half4(1.0f, 1.0f, 1.0f, 1.0f);

    #elif %_EFFECT_PATH
        o.color = opacity_ * paint;

    #elif %_EFFECT_PATH_AA
        o.color = (opacity_ * i.coverage) * paint;

    #elif %_EFFECT_IMAGE_OPACITY
        o.color = imageTex.Sample(imageSampler, i.uv1) * (opacity_ * paint.a);

    #elif %_EFFECT_SHADOW
        half2 uv = clamp(i.uv1 - shadowOffset, i.rect.xy, i.rect.zw);
        half alpha = lerp(imageTex.Sample(imageSampler, uv).a, shadowTex.Sample(shadowSampler, uv).a, blend);
        half4 img = imageTex.Sample(imageSampler, clamp(i.uv1, i.rect.xy, i.rect.zw));
        o.color = (img + (1.0 - img.a) * (shadowColor * alpha)) * paint.a;
    #elif %_EFFECT_BLUR
        o.color = lerp(imageTex.Sample(imageSampler, i.uv1), shadowTex.Sample(shadowSampler, i.uv1), blend) * paint.a;
    #elif %_EFFECT_SDF
        half4 color = glyphsTex.Sample(glyphsSampler, i.uv1);
        half distance = SDF_SCALE * (color.r - SDF_BIAS);

        #if 1
            half2 grad = ddx(i.st1);
        #else
            // For non-uniform scale or perspective this is the correct code. It is much more complex than the isotropic
            // case and probably not worth it
            // http://www.essentialmath.com/GDC2015/VanVerth_Jim_DrawingAntialiasedEllipse.pdf
            // https://www.essentialmath.com/blog/?p=151
            half2 Jdx = ddx(i.st1);
            half2 Jdy = ddy(i.st1);
            half2 distGrad = half2(ddx(distance), ddy(distance));
            half distGradLen2 = dot(distGrad, distGrad);
            distGrad = distGradLen2 < 0.0001 ? half2(0.7071, 0.7071) : distGrad * half(rsqrt(distGradLen2));
            half2 grad = half2(distGrad.x * Jdx.x + distGrad.y * Jdy.x, distGrad.x * Jdx.y + distGrad.y * Jdy.y);
        #endif

        half gradLen = (half)length(grad);
        half scale = 1.0 / gradLen;
        half base = SDF_BASE_DEV * (1.0f - (clamp(scale, SDF_BASE_MIN, SDF_BASE_MAX) - SDF_BASE_MIN) / (SDF_BASE_MAX - SDF_BASE_MIN));
        half range = SDF_AA_FACTOR * gradLen;
        half alpha = smoothstep(base - range, base + range, distance);

        o.color = (alpha * opacity_) * paint;

    #elif %_EFFECT_SDF_LCD
        half2 grad = ddx(i.st1);
        half2 offset = grad * textureSize.zw * (1.0 / 3.0);

        half4 red = glyphsTex.Sample(glyphsSampler, i.uv1 - offset);
        half4 green = glyphsTex.Sample(glyphsSampler, i.uv1);
        half4 blue = glyphsTex.Sample(glyphsSampler, i.uv1 + offset);
        half3 distance = SDF_SCALE * (half3(red.r, green.r, blue.r) - SDF_BIAS);

        half gradLen = (half)length(grad);
        half scale = 1.0 / gradLen;
        half base = SDF_BASE_DEV * (1.0 - (clamp(scale, SDF_BASE_MIN, SDF_BASE_MAX) - SDF_BASE_MIN) / (SDF_BASE_MAX - SDF_BASE_MIN));
        half range = SDF_AA_FACTOR * gradLen;
        half3 alpha = smoothstep(base - range, base + range, distance);

        o.color = half4(opacity_ * paint.rgb * alpha.rgb, alpha.g);
        o.alpha = half4((opacity_ * paint.a) * alpha.rgb, alpha.g);
    #elif %_EFFECT_DOWNSAMPLE
        o.color = 
        (
            patternTex.Sample(patternSampler, i.uv0) +
            patternTex.Sample(patternSampler, i.uv1) +
            patternTex.Sample(patternSampler, i.uv2) +
            patternTex.Sample(patternSampler, i.uv3)
        ) * 0.25;
    #elif EFFECT_UPSAMPLE
        o.color = lerp(imageTex.Sample(imageSampler, i.uv1), patternTex.Sample(patternSampler, i.uv0), paint.a);
    #endif

    return o;
}
///////////////////////////////////////////////  ResolvePS ///////////////////////////////////////////////

#define NUM_SAMPLES 4

//Texture2DMS<float4> t;

float4 NoesisResolve(in float4 pos: SV_Position): SV_Target
{
    float4 o = 0.0f;

    //[unroll]
    //for (int s = 0; s < NUM_SAMPLES; s++)
    //{
     //   o += t.Load(pos.xy, 0);
    //}

    return o;
}


///////////////////////////////////////////////  ClearPS ///////////////////////////////////////////////

float4 NoesisClear(): SV_Target
{
    return float4(0.0f, 0.0f, 0.0f, 0.0f);
}

///////////////////////////////////////////////  Technique ///////////////////////////////////////////////


technique Noesis
{
    pass p0
    {
        VertexShader = NoesisVS();
        PixelShader = NoesisPS();
    }
}

technique NoesisResolve
{
    pass p0
    {
        VertexShader = NoesisQuad();
        PixelShader = NoesisResolve();
    }
}

technique NoesisClear
{
    pass p0
    {
        VertexShader = NoesisQuad();
        PixelShader = NoesisClear();
    }
}